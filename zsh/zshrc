## before oh-my-zsh {{{

# Enable Powerlevel10k instant prompt
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# brew autocomplete
if [[ $OSTYPE == 'darwin'* ]] && command -v brew >/dev/null; then
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"
fi
#}}}

## oh-my-zsh {{{

# path to your oh-my-zsh installation
export ZSH=~/.oh-my-zsh

# Set theme
ZSH_THEME="powerlevel10k/powerlevel10k"

# plugins
plugins=(
  aws
  docker
  docker-compose
  git
  history
  npm
  nvm
  vi-mode
  z
)

source $ZSH/oh-my-zsh.sh
#}}}

## environment variables {{{

# set default editor
export VISUAL=nvim
export EDITOR=nvim

# don't show % at the end of partial lines
export PROMPT_EOL_MARK=""

# set less options
# i - case insensitive search (unless pattern contains capital)
# R - enable coloured output
# S - don't wrap lines
# c - clear-screen - Causes full screen repaints to be painted from the top line down
export LESS=iRSc

# fix less highlighting on mac
export LESS_TERMCAP_so=$'\E[30;43m'
export LESS_TERMCAP_se=$'\E[39;49m'

# history settings
export HISTFILE="$HOME/.zsh_history"
export HISTSIZE=100000
export SAVEHIST=$HISTSIZE

# set bat as man pager
export MANPAGER="sh -c 'col -bx | cat -l man -p'"
#}}}

## aliases {{{

# properly clears the terminal
alias cls='tput reset'

# list directories
alias l='ls -lh --group-directories-first'
alias ll='ls -lAh --group-directories-first'

# notes function
alias n='notes'

# exit
alias :q='exit'

# always turn colorization on
alias tree='tree -C'

# tmux
alias ta='tmux a -t' # attach to a session
alias tl='tmux list-sessions' # list all sessions
alias tn='newTmuxSession' # start a new named session
alias tv='newTmuxDevSession' # see function below

# ranger file explorer
if command -v ranger >/dev/null; then
  alias r='source ranger'
fi

# http server in current directory (default port 8000)
if command -v python3 >/dev/null; then
  alias serve='python3 -m http.server'
fi

# open snippets file in nvim
if [ -f $HOME/code/dotfiles/snippets/snippets.md ]; then
  alias snip="nvim $HOME/code/dotfiles/snippets/snippets.md"
fi

# replace ls with gls if installed
if command -v gls >/dev/null; then
  alias ls="gls --color"
fi

# replace dircolors with gdircolors if installed
if command -v gdircolors >/dev/null; then
  alias dircolors="gdircolors"
fi

# replace sed with gsed if installed
if command -v gsed >/dev/null; then
  alias sed="gsed"
fi
#}}}

## functions {{{

# get the weather
weather() { curl -s 'wttr.in/'${1:-'edinburgh'} | less }

# cheat.sh
cheat() { curl -s "https://cheat.sh/"$1 | less }

# load environment variables for ssh-agent and add ssh pass
sshadd() { eval $(ssh-agent); ssh-add }

# run a command in the background
background() { nohup $* &>/dev/null & }

# make a folder and cd into it
mk() { mkdir -p $1; cd $1 }

newTmuxSession() {
  if [ $# -lt 1 ]; then
    echo "Session name required"; return
  fi

  tmux new-session -s "$1"
}

newTmuxDevSession() {
  if [ $# -lt 1 ]; then
    echo "Session name required"; return
  fi

  name=$1
  tmux new-session -s "$name" -d

  for i in {1..3}; do
      tmux new-window -t "$name:$i"
  done

  tmux select-window -t "$name:1"
  tmux select-window -t "$name:0"
  tmux send-keys -t "$name:0" "nvim" Enter
  tmux attach-session -t "$name"
}

# open notes in nvim {{{
notesRoot=$HOME/notes
notes() {
  if [ -d $notesRoot ]; then
    if [ -z "$1" ]; then
      1=notes
    fi
    nvim $notesRoot/$1.md -c "cd $notesRoot"
  else
    echo "create directory $notesRoot"
  fi
}

# autocomplete for above notes function
function _notes(){
  if [ -d $notesRoot ]; then
    local state 
    _arguments '1:notes:->notesRoot'
    case $state in
      notesRoot)
        _describe 'notes' "($((cd $notesRoot && ls *.md) | sed 's/\.md$//'))"
        ;;
    esac
  fi
}
compdef _notes notes
#}}}
#}}}

## key bindings {{{

# enter normal mode in zsh vi-mode
bindkey "jk" vi-cmd-mode

# make ctrl-p/n behave like up/down arrows
bindkey "^P" up-line-or-beginning-search
bindkey "^N" down-line-or-beginning-search

# set shift-tab to reverse select menus
bindkey -M menuselect '^[[Z' reverse-menu-complete

# edit current command line in $EDITOR
bindkey -M vicmd "^V" edit-command-line
#}}}

## bat (cat replacement) {{{
export BAT_THEME='Catppuccin Mocha'

if command -v bat >/dev/null; then
  alias cat='bat'
  export MANPAGER="sh -c 'col -bx | bat -l man -p'"
elif command -v batcat >/dev/null; then
  alias cat='batcat'
  export MANPAGER="sh -c 'col -bx | batcat -l man -p'"
fi
# }}}

## misc {{{

# set colours for ls
if command -v dircolors >/dev/null && [ -f $HOME/.dircolors ] ; then
  eval $(dircolors $HOME/.dircolors)
fi

# awscli auto completion
if [ -f  /usr/local/bin/aws_zsh_completer.sh ]; then
  source /usr/local/bin/aws_zsh_completer.sh
fi

# Powerlevel10k
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
#}}}
